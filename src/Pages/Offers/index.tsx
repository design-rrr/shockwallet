import { toast } from "react-toastify";

import * as Icons from "../../Assets/SvgIconLibrary";
import { Clipboard } from "@capacitor/clipboard";
import React, { useEffect, useState } from "react";
import BootstrapSource from "../../Assets/Images/bootstrap_source.jpg";
import { useSelector, useDispatch, selectEnabledSpends, selectConnectedNostrSpends } from '../../State/store';
import { PayTo } from "../../globalTypes";
import { getNostrClient } from "../../Api";
import * as Types from '../../Api/pub/autogenerated/ts/types'
import { useIonRouter } from "@ionic/react";
type OfferItemType = {
  title: string;
  value: string;
  type: string;
};

const Offers = () => {
  const router = useIonRouter();
  const enabledPaySources = useSelector(selectConnectedNostrSpends);


  const [isEdit, setIsEdit] = useState<boolean>(false);

  const [showDropDown, setShowDropDown] = useState<boolean>(false);
  const [allValue, setAllValue] = useState<PayTo[]>(enabledPaySources);

  const [display, setDisplay] = useState(0);
  const [rotation, setRotation] = useState(0);
  const [value, setValue] = useState<PayTo>(enabledPaySources[0]);
  const [remainValues, setRemailValues] = useState<PayTo[]>([]);

  const [isConnect, setIsConnect] = useState<boolean>(true);
  const [displayData, setDisplayData] = useState<PayTo>();
  const [offerValue, setOfferValue] = useState<string>("");
  const [userIdentifier, setUserIdentifier] = useState<string>("");
  const [sourceOffers, setSourceOffers] = useState<Types.OfferConfig[]>([]);

  useEffect(() => {
    setShowDropDown(showDropDown);
  }, [showDropDown]);

  useEffect(() => {
    setDisplayData(value)
    getNostrClient(value.pasteField, value.keys).then(c => {
      c.GetUserInfo().then(res => {
        console.log(res)
        if (res.status === "OK") {
          setOfferValue(res.noffer)
          setUserIdentifier(res.user_identifier)
        }
      })
      c.GetUserOffers().then(res => {
        if (res.status === "OK") {
          setSourceOffers(res.offers)

        }
      })
    })
  }, [value]);

  const dropdown = () => {
    const remainValues = allValue.filter((e) => e.label !== value.label);
    setRemailValues(remainValues);
    setDisplay(display === 0 ? 1 : 0);
    setRotation(rotation === 0 ? 90 : 0);
  };

  const arrangeIcon = (value?: string, sourcePub?: string) => {
    console.log(value, sourcePub)
    switch (value) {
      case "0":
        return (
          <React.Fragment>
            <img
              src={BootstrapSource}
              width="23px"
              alt="Avatar"
              style={{ borderRadius: "50%" }}
            />
          </React.Fragment>
        );
      case "1":
        return Icons.mynodeSmall();

      case "2":
        return Icons.uncleSmall();

      case "3":
        return Icons.lightningSmall();

      case "4":
        return Icons.zbdSmall();

      case "5":
        return Icons.stackerSmall();

      default:
        if (sourcePub) {
          return (
            <React.Fragment>
              <img
                src={`https://robohash.org/${sourcePub}.png?bgset=bg1`}
                width="23px"
                alt="Avatar"
                style={{ borderRadius: "50%" }}
              />
            </React.Fragment>
          );
        }
        if (!value?.includes("http")) {
          value = "http://www.google.com/s2/favicons?sz=64&domain=" + value;
        }
        return (
          <React.Fragment>
            <img
              src={value}
              width="23px"
              alt=""
              style={{ borderRadius: "50%" }}
            />
          </React.Fragment>
        );
    }
  };

  const selectOption = (id: PayTo) => {
    dropdown();
    setValue(id);
  };

  const CopyToClipboard = async (copyText: string) => {
    let clipbaordStr = "";
    clipbaordStr = copyText;
    await Clipboard.write({
      string: clipbaordStr,
    });
    toast.success("Copied to clipboard");
  };

  const changeOfferHandle = (data: string) => {
    setOfferValue(data)
  }

  const addCustomOffer = () => {
    getNostrClient(value.pasteField, value.keys).then(c => {
      c.AddUserOffer({ label: "Custom Offer", callback_url: "", default_offer: false, expected_data: {}, noffer: "", offer_id: "", price_sats: 0 }).then(res => {
        if (res.status !== "OK") {
          toast.error("failed to create offer" + res.reason)
          return
        }
        router.push("/OfferInfo?o=" + res.offer_id + "&s=" + value.id);
      })
    })
  }

  return (
    <div className="Offers_container">
      <div className="Offers">
        <div className="Offers_header_text">Static Payment Offers</div>
        {isConnect ? (
          <>
            <div className="Offers_item" onClick={dropdown}>
              <div className="selected_item">
                {value ? (
                  <div className="item" key={value.label}>
                    {arrangeIcon(value.icon, value.pubSource ? value.id.split("-")[0] : undefined)}
                    <div className="Offers_from_value">{value.label}</div>
                  </div>
                ) : (
                  <div></div>
                )}
                <div
                  className="offers_dropdown"
                  style={{
                    opacity: display,
                    transition: "0.3s",
                    overflow: "hidden",
                  }}
                >
                  {display === 1 &&
                    remainValues.map((item: PayTo) => {
                      return (
                        <div
                          onClick={() => {
                            selectOption(item);
                          }}
                          className="item"
                          key={item.label}
                        >
                          {arrangeIcon(item.icon, item.pubSource ? item.id.split("-")[0] : undefined)}
                          <div className="Offers_from_value">{item.label}</div>
                        </div>
                      );
                    })}
                </div>
              </div>
              <div
                className="RightIcon"
                style={{
                  transform: `rotate(${rotation}deg)`,
                  transition: "0.3s",
                }}
              >
                {Icons.arrow()}
              </div>
            </div>
            {sourceOffers.filter(o => o.offer_id !== userIdentifier).map(((o, i) => <div key={i} className="Offers_source" onClick={() => {
              router.push("/OfferInfo?o=" + o.offer_id + "&s=" + value.id);
            }}>
              <div className="source_header">
                <div className="title">{o.label}</div>
                <div
                  className="edit_icon"
                  onClick={() => {
                    setIsEdit(!isEdit)
                  }}
                >
                  {Icons.pencilIcons()}
                </div>
              </div>
              <div className="source_data">{o.noffer}</div>
              <div className="source_footer">
                {!o.price_sats && <div className="title">Spontaneous Payments</div>}
                {!!o.price_sats && <div className="title">{o.price_sats} sats</div>}
                <div
                  className="CopyIcon"
                  onClick={() => {
                    CopyToClipboard(o.noffer);
                  }}
                >
                  {Icons.combindIcon()}
                </div>
              </div>
            </div>))}
            <button style={{ height: 40 }} onClick={() => { addCustomOffer() }}>ADD</button>
          </>
        ) : (
          <div className="Offers_connect_state">
            Not Connected
          </div>
        )}
      </div>
    </div>
  );
};

export default Offers;