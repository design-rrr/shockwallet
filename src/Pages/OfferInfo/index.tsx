import { toast } from "react-toastify";
import * as Icons from "../../Assets/SvgIconLibrary";
import { Clipboard } from "@capacitor/clipboard";
import React, { useEffect, useMemo, useState } from "react";
import BootstrapSource from "../../Assets/Images/bootstrap_source.jpg";
import { useSelector, useDispatch, selectEnabledSpends, selectConnectedNostrSpends } from '../../State/store';
import { PayTo } from "../../globalTypes";
import { getNostrClient } from "../../Api";
import { useParams, useLocation } from "react-router";
import * as Types from '../../Api/pub/autogenerated/ts/types'
import Checkbox from "../../Components/Checkbox";
import { OfferData } from "./OfferData";
import { OfferLabel } from "./OfferLabel";
import { OfferCbUrl } from "./OfferCbUrl";
import { OfferPrice } from "./OfferPrice";
import { OfferHistory } from "./OfferHistory";
type OfferItemType = {
  title: string;
  value: string;
  type: string;
};

export const OfferInfo = () => {
  const location = useLocation()
  const sources = useSelector(s => s.paySource.sources)
  const [selectedSource, setSelectedSource] = useState<PayTo>()
  const [offerConfig, setOfferConfig] = useState<Types.OfferConfig>()
  const [expectedData, setExpectedData] = useState<string[]>([])
  const [offerInvoices, setOfferInvoices] = useState<Types.OfferInvoice[]>([])
  const [showUnpaid, setShowUnpaid] = useState<boolean>(false)
  const params = useMemo(() => {
    const p = new URLSearchParams(location.search)
    const offerId = p.get('o')
    const source = p.get('s')
    const defaultOffer = p.get('d')
    return { offerId, source, defaultOffer }
  }, [location.search])
  useEffect(() => {
    if (!params.offerId || !params.source) {
      return
    }
    const source = sources[params.source]
    if (!source) {
      return
    }
    setSelectedSource(source)
    getNostrClient(source.pasteField, source.keys).then(c =>
      c.GetUserOffer({ offer_id: params.offerId! }).then(res => {
        if (res.status !== "OK") {
          toast.error("failed to fetch offer info " + res.reason)
          console.log(res)

          return
        }
        setOfferConfig(res)
        setExpectedData(Object.keys(res.expected_data))
      }).catch(e => toast.error("failed to fetch offer info"))
    )
  }, [params.offerId])

  useEffect(() => {
    if (!offerConfig || !selectedSource) {
      return
    }
    getNostrClient(selectedSource.pasteField, selectedSource.keys).then(c =>
      c.GetUserOfferInvoices({ offer_id: params.offerId!, include_unpaid: showUnpaid }).then(res => {
        if (res.status !== "OK") {
          toast.error("failed to fetch offer invoices " + res.reason)
          console.log(res)

          return
        }
        setOfferInvoices(res.invoices)
      }).catch(e => toast.error("failed to fetch offer invoices"))
    )
  }, [offerConfig?.offer_id, showUnpaid])

  const save = (fresh: { offerConfig?: Types.OfferConfig, expectedData?: string[] }) => {
    if (fresh.offerConfig) {
      setOfferConfig(fresh.offerConfig)
    }
    if (fresh.expectedData) {
      setExpectedData(fresh.expectedData)
    }
    const configToSave = fresh.offerConfig || offerConfig
    const dataToSave = fresh.expectedData || expectedData
    if (!configToSave || !selectedSource) {
      return
    }
    const data = {
      ...configToSave,
      expected_data: dataToSave.reduce((acc, d) => ({ ...acc, [d]: Types.OfferDataType.DATA_STRING }), {}),
    }
    getNostrClient(selectedSource.pasteField, selectedSource.keys).then(c =>
      c.UpdateUserOffer(data).then(res => {
        if (res.status !== "OK") {
          toast.error("failed to update offer " + res.reason)
          return
        }

        toast.success("Offer updated")
      }).catch(e => toast.error("failed to update offer"))
    )
  }

  const addExpectedData = (exd: string) => {
    if (!exd) {
      return expectedData
    }
    const exists = expectedData.find(d => d === exd)
    if (!exists) {
      return [...expectedData, exd]
    }
    return expectedData
  }



  if (!offerConfig) {
    return <div style={{ textAlign: 'center' }}>
      <div  >
        <div >Loading Offer...</div>

      </div>
    </div>
  }
  return (
    <div style={{ textAlign: 'center', border: '1px solid grey', padding: '20px 10%', borderRadius: 10 }}>
      <div>
        <div>{offerConfig.label}</div>
        <p style={{ color: "grey" }}>{offerConfig.offer_id}</p>
        <br />
        <p><span>Noffer: </span>{offerConfig.noffer.slice(0, 30)}...<span>{Icons.copy()}</span></p>
        <br />
        <OfferLabel existingLabel={offerConfig.label} updateLabel={s => save({ offerConfig: { ...offerConfig, label: s } })} />
        <br />
        <OfferData expectedData={expectedData} removeFromExpected={s => save({ expectedData: expectedData.filter(d => d !== s) })} addToExpected={s => save({ expectedData: addExpectedData(s) })} />
        <br />
        <OfferCbUrl expectedData={expectedData} existingCbUrl={offerConfig.callback_url} updateCbUrl={s => save({ offerConfig: { ...offerConfig, callback_url: s } })} />
        <br />
        <OfferPrice existingPrice={offerConfig.price_sats} updatePrice={n => save({ offerConfig: { ...offerConfig, price_sats: n } })} />
        <br />
        <OfferHistory history={offerInvoices} showUnpaid={showUnpaid} setShowUnpaid={(e) => setShowUnpaid(e)} />
      </div>
    </div>
  );
};

