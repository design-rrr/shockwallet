import React, { useState } from 'react';
import { NavigateFunction, useNavigate } from "react-router-dom";
import { PageProps, SendFrom } from "../../globalTypes";
import { nostr } from '../../Api'

//It import svg icons library
import * as Icons from "../../Assets/SvgIconLibrary";
import { AddressType } from '../../Api/autogenerated/ts/types';
import { Modal } from '../../Components/Modals/Modal';
import { UseModal } from '../../Hooks/UseModal';
import SpendFromDropdown from '../../Components/Dropdowns/SpendFromDropdown';

export const Send: React.FC<PageProps> = (): JSX.Element => {
  const [error, setError] = useState("")
  const [invoiceAmount, setInvoiceAmount] = useState(0);
  const [invoiceMemo, setInvoiceMemo] = useState("");
  const [deg, setDeg] = useState("rotate(0deg)");
  const [valueQR, setValueQR] = useState("LNURL12344adfasdfasdfasdfsdf5677888");
  const [vCreateInvoice, setVCreateInvoice] = useState(0);
  const [vReceive, setVReceive] = useState(1);
  const [isCopy, setIsCopy] = useState(false);
  const [amountAssets, setAmountAssets] = useState("sats");
  const [amount, setAmount] = useState(0);
  const [to, setTo] = useState("");
  const [note, setNote] = useState("");
  const { isShown, toggle } = UseModal();
  const [spendFromList, setSpendFromList] = useState<Array<any>>([
    {
      id: 5,
      label: "stacker.news",
      pasteField: "21mz66...",
      icon: "5",
      balance: "615",
    } as SendFrom,
    {
      id: 4,
      label: "zbd.gg",
      pasteField: "21mz66...",
      icon: "4",
      balance: "420K",
    } as SendFrom,
    {
      id: 3,
      label: "lightning.video",
      pasteField: "21mz66...",
      icon: "3",
      balance: "1M",
    } as SendFrom,
    {
      id: 2,
      label: "Uncle Jim's Node",
      pasteField: "33q66w6...",
      icon: "2",
      balance: "2.1M",
    } as SendFrom,
    {
      id: 1,
      label: 'My Node',
      pasteField: "",
      icon: "1",
      balance: "10M",
    } as SendFrom,
  ]);


  const navigate: NavigateFunction = useNavigate()

  const ChainAdress = async () => {
    const res = await nostr.NewAddress({ addressType: AddressType.WITNESS_PUBKEY_HASH })
    if (res.status !== 'OK') {
      setError(res.reason)
      return
    }

    setValueQR(`bitcoin:${res.address}`);
    setDeg("rotate(90deg)");
    setIsCopy(false);
  }

  const CreateInvoice = () => {
    setVCreateInvoice(1);
    setVReceive(0);
  }

  const CreateInvoiceOK = async () => {
    const res = await nostr.NewInvoice({
      amountSats: invoiceAmount,
      memo: invoiceMemo
    })
    if (res.status !== 'OK') {
      setError(res.reason)
      return
    }
    setVCreateInvoice(0);
    setVReceive(1);
    setDeg("rotate(180deg)");
    setValueQR(`lightning:${res.invoice}`);
    setIsCopy(false);
  }

  const CreateInvoiceCancel = () => {
    setVCreateInvoice(0);
    setVReceive(1);
  }

  const confirmContent = <React.Fragment>
    <div className="Sources_notify">
      <div className="Sources_notify_title">Amount to Receive</div>
      <button className="Sources_notify_button" onClick={toggle}>OK</button>
    </div>
  </React.Fragment>;

  return (
    <div className='Send_container'>
      <div className="Send" style={{ opacity: vReceive, zIndex: vReceive ? 1000 : -1 }}>
        <div className="Send_header_text">Send Payment</div>
        <div className="Send_config">
          <div className="Send_amount">
            Amount: 
            <div className='Send_amount_container'>
              <input className="Send_amount_input" type="number" value={amount} onChange={(e) => {setAmount(parseInt(e.target.value))}}/>
              <button onClick={() => {setAmountAssets(amountAssets === "BTC"?"sats":"BTC")}}>{amountAssets}</button>
            </div>
          </div>
          <div className='Send_available_amount'>
            ~ $40,000.00
          </div>
          <div className="Send_to">
            <p>To:</p>
            <input type="text" placeholder="Invoice, Bitcoin or Lightning Address, nPub, Email" value={to} onChange={(e) => {setTo(e.target.value)}}/>
          </div>
          <div className="Send_for">
            <p>For:</p>
            <input type="text" placeholder="Add a note" value={note} onChange={(e) => {setNote(e.target.value)}}/>
          </div>
          <div className="Send_from">
            <p>Spend From:</p>
            <SpendFromDropdown values={spendFromList} initialValue={spendFromList[0]}/>
          </div>
        </div>
      </div>
      <div className="Send_other_options">
        <div className="Send_lnurl">
          <div className="Send_set_amount_copy">
            <button onClick={()=>{navigate("/home")}}>{Icons.Close()}CANCEL</button>
          </div>
        </div>
        <div className="Send_chain">
          <div className="Send_set_amount_copy">
            <button onClick={toggle}>{Icons.send()}SEND</button>
          </div>
        </div>
      </div>
      <Modal isShown={isShown} hide={toggle} modalContent={confirmContent} headerText={''} />
    </div>
  )
}