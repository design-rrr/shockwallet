import { useEffect, useState } from "react"
import Dropdown, { Period, periodOptionsArray, getPeriodText } from "../../Components/Dropdowns/LVDropdown"
import { AdminGuard, AdminSource } from "../../Components/AdminGuard"
import { getNostrClient } from "../../Api"
import { toast } from "react-toastify";
import * as Icons from "../../Assets/SvgIconLibrary";
import styles from "./styles/index.module.scss";
import classNames from 'classnames';
import * as Types from '../../Api/pub/autogenerated/ts/types';

export default function Earnings() {
    const [period, setPeriod] = useState<Period>(Period.WEEK)
    const [offset, setOffset] = useState<number>(0)
    const [adminSource, setAdminSource] = useState<AdminSource | null>(null)
    const [metrics, setMetrics] = useState<Types.AppsMetrics>()
    const [showingOps, setShowingOps] = useState("")
    useEffect(() => {
        const params = new URLSearchParams(window.location.search)
        const period = params.get("period")
        const offset = params.get("offset")
        if (period) {
            setPeriod(period as Period)
        }
        if (offset) {
            setOffset(parseInt(offset))
        }
    }, [])
    useEffect(() => {
        fetchMetrics()
    }, [period, offset])
    const nextOffset = () => {
        if (period === Period.ALL_TIME || offset >= 0) {
            return
        }
        setOffset(offset + 1)
    }

    const prevOffset = () => {
        if (period === Period.ALL_TIME) {
            return
        }
        setOffset(offset - 1)
    }
    const fetchMetrics = async () => {
        if (!adminSource) {
            return
        }
        const client = await getNostrClient(adminSource.nprofile, adminSource.keys)
        const periodRange = getUnixTimeRange(period, offset);
        const metrics = await client.GetAppsMetrics({ ...periodRange, include_operations: true })
        if (metrics.status !== 'OK') {
            toast.error(metrics.reason)
            return
        }
        console.log({ metrics })
        setMetrics(metrics)
    }
    if (!adminSource) {
        return <AdminGuard updateSource={s => { console.log({ adminSource }); setAdminSource(s) }} />
    }
    return <div className={styles["metrics-container"]}>
        <div className={styles["section"]}>
            <div className={styles["center"]}>
                <Dropdown<Period>
                    setState={(value) => { setPeriod(value); setOffset(0) }}
                    otherOptions={periodOptionsArray}
                    jsx={<div className={classNames(styles["center"], styles["box"])}>
                        <span className={styles["icon_pub"]}>{Icons.Automation()}</span>
                        <span>{getPeriodText(period, offset)}</span>
                    </div>}
                />
                <div style={{ display: 'flex', alignItems: 'center', }} className={styles["box"]}>
                    <div onClick={() => prevOffset()} >{Icons.arrowLeft()}</div>
                    {Icons.verticalLine()}
                    <div onClick={() => nextOffset()} >{Icons.arrowRight()}</div>
                </div>
            </div>
        </div>

        {metrics?.apps.map((app, i) => <div key={i} className={styles["section"]} style={{ borderBottom: '1px solid #ccc', paddingBottom: 10 }}>
            <div style={{ height: 30 }}></div>
            <div className={styles["center"]}>{app.app.name}: moved {app.received + app.spent} sats in {app.operations.length} operations, earning {app.fees} sats</div>
            {showingOps !== app.app.name && <div style={{ textAlign: 'center', textDecoration: 'underline', cursor: 'pointer' }} onClick={() => setShowingOps(app.app.name)}>Show operations</div>}
            {
                showingOps === app.app.name && <>
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <div>Op type</div>
                        <div>Amount</div>
                        <div>Service fee</div>
                    </div>
                    {app.operations.map((op, i) => <div key={i} style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <div>{op.type}</div>
                        <div>{op.amount}</div>
                        <div>{op.service_fee}</div>
                    </div>)}
                    <div style={{ textAlign: 'center', textDecoration: 'underline', cursor: 'pointer' }} onClick={() => setShowingOps("")}>Hide operations</div>
                </>
            }
        </div>)}
    </div>
}

export const getUnixTimeRange = (period: Period, offset: number) => {
    const now = new Date();
    let from_unix: number, to_unix: number;

    switch (period) {
        case Period.WEEK: {
            /*       const thisWeek = new Date(now.setDate(now.getDate() - now.getDay()))
                  thisWeek.setHours(0, 0, 0, 0)
                  console.log({ thisWeek: thisWeek.toISOString() })
                  const thisWeekMs = thisWeek.getTime() */

            const firstDayOfWeek = new Date(new Date().setDate(now.getDate() - now.getDay() + (offset * 7))).setHours(0, 0, 0, 0);
            const lastDayOfWeek = new Date(new Date().setDate(now.getDate() - now.getDay() + 6 + (offset * 7))).setHours(23, 59, 59, 999);
            from_unix = Math.floor(firstDayOfWeek / 1000);
            to_unix = Math.floor(lastDayOfWeek / 1000);
            break;
        }

        case Period.MONTH: {
            const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth() + offset, 1).getTime();
            const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1 + offset, 0).setHours(23, 59, 59, 999);
            from_unix = Math.floor(firstDayOfMonth / 1000);
            to_unix = Math.floor(lastDayOfMonth / 1000);
            break;
        }

        case Period.YEAR: {
            const firstDayOfYear = new Date(now.getFullYear() + offset, 0, 1).getTime();
            const lastDayOfYear = new Date(now.getFullYear() + offset, 11, 31).setHours(23, 59, 59, 999);
            from_unix = Math.floor(firstDayOfYear / 1000);
            to_unix = Math.floor(lastDayOfYear / 1000);
            break;
        }
        case Period.ALL_TIME:
            return undefined
    }
    console.log({ from_unix: new Date(from_unix * 1000).toISOString(), to_unix: new Date(to_unix * 1000).toISOString() })
    return { from_unix, to_unix };
}