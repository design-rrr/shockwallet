import React, { useEffect, useState } from 'react';
import { NavigateFunction, useNavigate } from "react-router-dom";
import { ReactQrCode } from '@devmehq/react-qr-code';
import CopyToClipboard from "react-copy-to-clipboard";
import { PageProps } from "../../globalTypes";
import { nostr } from '../../Api'
import { bech32 } from "bech32";

//It import svg icons library
import * as Icons from "../../Assets/SvgIconLibrary";
import { AddressType } from '../../Api/autogenerated/ts/types';
import { Modal } from '../../Components/Modals/Modal';
import { UseModal } from '../../Hooks/UseModal';
import { useSelector, useDispatch } from 'react-redux';
import { notification } from 'antd';
import { NotificationPlacement } from 'antd/es/notification/interface';
import { NOSTR_RELAYS } from '../../constants';
import bolt11 from "bolt11";
import axios from 'axios';


export const Receive: React.FC<PageProps> = (): JSX.Element => {

  //reducer
  const paySource = useSelector((state:any) => state.paySource).map((e:any)=>{return {...e}});
  const price = useSelector((state:any) => state.usdToBTC);
  const [deg, setDeg] = useState("rotate(0deg)");
  const [vReceive, setVReceive] = useState(1);
  const { isShown, toggle } = UseModal();
  const [amount, setAmount] = useState("");
  const [amountValue, setAmountValue] = useState("");
  const [LNInvoice, setLNInvoice] = useState("");
  const [LNurl, setLNurl] = useState("");
  const [valueQR, setValueQR] = useState("");

  const navigate: NavigateFunction = useNavigate();

  const [api, contextHolder] = notification.useNotification();
  const openNotification = (placement: NotificationPlacement, header: string, text: string) => {
    api.info({
      message: header,
      description:
        text,
      placement
    });
  };

  useEffect(()=>{
    configInvoice();
    configLNURL();
    if (paySource.length === 0) {
      setTimeout(() => {
        navigate("/home");
      }, 1000);
      return openNotification("top", "Error", "You don't have any source!");
    }
  },[]);

  useEffect(() => {
    setValueQR(LNInvoice);
  },[LNInvoice])

  const copyToClip = () => {
    navigator.clipboard.writeText(valueQR)
    return openNotification("top", "Success", "Copied!");
  }

  const configInvoice = async () => {
    const address = configLNaddress();
    const callAddress = await axios.get(address);
    if (amountValue === "") {
      setAmountValue(callAddress.data.minSendable)
      setAmount(callAddress.data.minSendable) 
    }
    const callbackURL = await axios.get(callAddress.data.callback+"?amount="+(amountValue===""?callAddress.data.minSendable:amount));
    setLNInvoice(callbackURL.data.pr);
  }
  
  const configLNURL = () => {
    const address = configLNaddress();
    let words = bech32.toWords(Buffer.from(address, 'utf8'))
    const lnaddress = bech32.encode("lnurl", words, 999999);
    setLNurl(lnaddress);
  }

  const configLNaddress = () => {
    let valueOfQR = "";
    if (paySource[0].pasteField.includes("@")) {
      valueOfQR = "https://" + paySource[0].pasteField.split("@")[1] + "/.well-known/lnurlp/" + paySource[0].pasteField.split("@")[0];
    }else {
      let { words: dataPart } = bech32.decode(paySource[0].pasteField.replace("lightning:", ""), 2000);
      let sourceURL = bech32.fromWords(dataPart);
      valueOfQR = Buffer.from(sourceURL).toString();
    }
    return valueOfQR;
  }
  

  const updateInvoice = async () => {
    setAmountValue(amount);
    configInvoice()
    toggle()
  }

  const changeQRcode = () => {
    if (valueQR === LNInvoice) {
      setValueQR(LNurl);
    }else {
      setValueQR(LNInvoice);
    }
  }

  const setAmountContent = <React.Fragment>
    <div className="Sources_notify">
      <div className="Sources_notify_title">Amount to Receive</div>
      <div className="Receive_result_input">
        <input
          type="number"
          onChange={(e) => {setAmount(e.target.value)}}
          placeholder="Enter amount in sats"
          value={amount}
        />
      </div>
      <div className='Receive_modal_amount'>
        ~ ${(parseFloat(amount||"0") * price.buyPrice * 0.00000001).toFixed(4)}
      </div>
      <button className="Sources_notify_button" onClick={updateInvoice}>OK</button>
    </div>
  </React.Fragment>;

  return (
    <div>
      {contextHolder}
      <div className="Receive" style={{ opacity: vReceive, zIndex: vReceive ? 1000 : -1 }}>
        <div className="Receive_QR_text">{valueQR === LNInvoice ? "Lightning Invoice" : "LNURL"}</div>
        <div className="Receive_QR" style={{ transform: deg }}>
          <a href={'lightning:' + valueQR}>scsc</a>
          <ReactQrCode
            style={{ height: "auto", maxWidth: "300px", textAlign: "center", transitionDuration: "500ms" }}
            value={valueQR}
            size={250}
            renderAs="svg"
          />
          <div className="Receive_logo_container">
              {Icons.Logo()}
          </div>
        </div>
        <div className='Receive_copy'>
          ~ ${(parseFloat(amountValue || "0") * price.buyPrice * 0.00000001).toFixed(4)}
        </div>
        <div className="Receive_set_amount">
          <button onClick={toggle}>SET AMOUNT</button>
        </div>
        <div className="Receive_set_amount_copy">
          <button onClick={copyToClip} style={{width: "130px"}}>{Icons.copy()}COPY</button>
          <div style={{width: "20px"}}/>
          <button onClick={()=>{}} style={{width: "130px"}}>{Icons.share()}SHARE</button>
        </div>
        <div className="Receive_other_options">
          <div className="Receive_lnurl">
            <button onClick={changeQRcode}>
              {Icons.arrowLeft()}LNURL
            </button>
          </div>
          <div className="Receive_chain">
            <button>
              CHAIN{Icons.arrowRight()}
            </button>
          </div>
        </div>
      </div>
      <Modal isShown={isShown} hide={toggle} modalContent={setAmountContent} headerText={''} />
      {/* <div className='CreateInvoice' style={{ opacity: vCreateInvoice, zIndex: vCreateInvoice ? 1000 : -1 }}>
        <div className="CreateInvoice_title">Create Invoice</div>
        <div className="CreateInvoice_content">
          <div className="CreateInvoice_content_price">~ $.10</div>
          <div className="CreateInvoice_content_amount">
            <span className="CreateInvoice_content_amount">âš¡</span>
            <input
              type="number"
              placeholder="Enter amount in sats..."
              onChange={(e) => setInvoiceAmount(+e.target.value)}
              value={invoiceAmount ? invoiceAmount : undefined}
            />
          </div>
          <div className="CreateInvoice_content_amount" style={{ marginTop: "15px" }}>
            <input
              type="text"
              placeholder="Optional memo..."
              onChange={(e) => setInvoiceMemo(e.target.value)}
              value={invoiceMemo ? invoiceMemo : undefined}
            />
          </div>
          <div className="CreateInvoice_content_btn_grp">
            <div className="CreateInvoice_content_btn_grp_item_1">
              <button onClick={CreateInvoiceCancel}>Cancel</button>
            </div>
            <div className="CreateInvoice_content_btn_grp_item_2">
              <button onClick={CreateInvoiceOK}>OK</button>
            </div>
          </div>
        </div>
      </div> */}
    </div>
  )
}