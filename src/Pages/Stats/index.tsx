import { toast } from "react-toastify";
import moment from "moment";
import { Chart as ChartJS, registerables, Legend } from 'chart.js';
import { Chart, Line } from 'react-chartjs-2'
ChartJS.register(...registerables, Legend);
import * as Icons from "../../Assets/SvgIconLibrary";
import { Clipboard } from "@capacitor/clipboard";
import React, { useEffect, useMemo, useState } from "react";
import BootstrapSource from "../../Assets/Images/bootstrap_source.jpg";
import { useSelector, useDispatch, selectEnabledSpends, selectConnectedNostrSpends } from '../../State/store';
import { PayTo, SpendFrom } from "../../globalTypes";
import { getNostrClient } from "../../Api";
import { useParams, useLocation } from "react-router";
import * as Types from '../../Api/pub/autogenerated/ts/types'
import Checkbox from "../../Components/Checkbox";
import { parseTLV, tlvToUsageMetrics } from "./tlv";
import { SelectedMetrics, UsageGraph, z } from "./UsageGraph";
import { newWebRtcConnection } from "./webRTC";
import { BundleDataPoint, fetchBundleStats, fetchErrors, fetchUsageStats, MetricsData } from "./statsApi";
import { BundleGraph } from "./BundleGraph";
import { ErrorsView } from "./ErrorsView";
import { Graphs } from "./Graphs";
import { AdminGuard, AdminSource } from "../../Components/AdminGuard";
//import { MetricsData } from "./StatsGraph";
type OfferItemType = {
  title: string;
  value: string;
  type: string;
};
//const z = (n: number) => n < 10 ? `0${n}` : `${n}`
//export type MetricsData = { entries: Types.UsageMetric[], currentPage: number, allPages: number[] }

type PagedData = Record<string, Record<string, Record<number, Types.UsageMetric[]>>>
/* type SelectedMetrics = {
  auth_in_nano?: boolean
  handle_in_nano?: boolean
  parsed_in_nano?: boolean
  validate_in_nano?: boolean
} */

export const Stats = () => {
  /*   const [selectedSourceId, setSelectedSourceId] = useState<string>('')
    const [selectedSource, setSelectedSource] = useState<SpendFrom>()
    const enabledPaySources = useSelector((state) =>
      state.spendSource.order.map(id => state.spendSource.sources[id]).filter(source => source.pubSource && source.adminToken)) */
  const [adminSource, setAdminSource] = useState<AdminSource | undefined>(undefined)
  /*     useEffect(() => {
        if (!selectedSourceId) return
        const source = enabledPaySources.find((source) => source.pasteField === selectedSourceId)
        if (!source) return
        setSelectedSource(source)
      }, [selectedSourceId]) */

  /*   if (!selectedSource) {
      return <div style={{ textAlign: 'center' }}>
        <h1 >Stats</h1>
        <select style={{ color: "black" }} value={selectedSourceId} onChange={(e) => setSelectedSourceId(e.target.value)}>
          <option value="" hidden>Select Source</option>
          {enabledPaySources.map((item, index) => <option key={index} value={item.pasteField}>{item.label}</option>)}
        </select>
      </div>
    } */
  if (!adminSource) {
    return <AdminGuard updateSource={s => setAdminSource(s)} />
  }
  return <div>
    <Graphs adminSource={adminSource} />
  </div>
}