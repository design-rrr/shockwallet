import { generatePrivateKey, getPublicKey, nip19 } from 'nostr-tools'
import { NOSTR_PRIVATE_KEY_STORAGE_KEY, NOSTR_PUBLIC_KEY_STORAGE_KEY, NOSTR_PUB_DESTINATION, NOSTR_RELAYS } from '../constants'
import { NostrRequest } from './autogenerated/ts/nostr_transport'
import NewNostrClient from './autogenerated/ts/nostr_client'
import NostrHandler from './nostrHandler'
import { Buffer } from 'buffer'
export const setNostrPrivateKey = () => {
    localStorage.setItem(NOSTR_PRIVATE_KEY_STORAGE_KEY, nostrPrivateKey || "")
    localStorage.setItem(NOSTR_PUBLIC_KEY_STORAGE_KEY, nostrPublicKey || "")
}
const getNostrPrivateKey = () => {
    return localStorage.getItem(NOSTR_PRIVATE_KEY_STORAGE_KEY)
}
let nostrPrivateKey = getNostrPrivateKey()
if (!nostrPrivateKey) {
    nostrPrivateKey = generatePrivateKey()
    // setNostrPrivateKey(nostrPrivateKey)
}
const nostrPublicKey = getPublicKey(nostrPrivateKey)
type Client = ReturnType<typeof NewNostrClient>
type PendingClient = { type: 'promise', queue: ((c: Client) => void)[] }
type ReadyClient = { type: 'client', client: Client }
type StoredClient = PendingClient | ReadyClient
const clients: Record<string, StoredClient> = {}

const parseNprofile = (nprofile: string) => {
    const { type, data } = nip19.decode(nprofile)

    if (type !== "nprofile") {
        throw new Error("invalid bech32 this is not a nprofile")
    }
    const dataString = JSON.stringify(data);
    const dataBox = JSON.parse(dataString);

    return dataBox;
}

export const getNostrClient = async (nProfile: string): Promise<Client> => {
    const { pubkey, relays } = parseNprofile(nProfile)
    const c = clients[pubkey]
    if (c && c.type === 'client') {
        return c.client
    }
    if (c && c.type === 'promise') {
        return new Promise<Client>((res) => {
            (clients[pubkey] as PendingClient).queue.push(res)
        })
    }
    if (!relays) {
        throw new Error("cannot create client if no relays are provided")
    }
    clients[pubkey] = { type: 'promise', queue: [] }
    const readyClient = await createNostrClient(pubkey, relays)
    const queue = (clients[pubkey] as PendingClient).queue
    clients[pubkey] = { type: 'client', client: readyClient }
    queue.forEach(f => f(readyClient))
    return readyClient
}
type nostrCallback = { type: 'single' | 'stream', f: (res: any) => void }
const createNostrClient = async (pubDestination: string, relays: string[]) => {
    const clientCbs: Record<string, nostrCallback> = {}
    const handler = await new Promise<NostrHandler>((res) => {
        const h = new NostrHandler({
            privateKey: nostrPrivateKey!,
            publicKey: nostrPublicKey,
            relays
        },
            () => { res(h) },
            e => {
                const res = JSON.parse(e.content) as { requestId: string }
                if (clientCbs[res.requestId]) {
                    console.log("cb found")
                    const cb = clientCbs[res.requestId]
                    cb.f(res)
                    if (cb.type === 'single') {
                        delete clientCbs[res.requestId]
                    }
                } else {
                    console.log("cb not found")
                }
            })
    })
    const clientSend = (to: string, message: NostrRequest): Promise<any> => {
        if (!message.requestId) {
            message.requestId = makeId(16)
        }
        const reqId = message.requestId
        if (clientCbs[reqId]) {
            throw new Error("request was already sent")
        }
        handler.Send(to, JSON.stringify(message))
        return new Promise(res => {
            clientCbs[reqId] = {
                type: 'single',
                f: (response: any) => { res(response) }
            }
        })
    }
    const clientSub = (to: string, message: NostrRequest, cb: (res: any) => void): void => {
        if (!message.requestId) {
            message.requestId = makeId(16)
        }
        const reqId = message.requestId
        if (clientCbs[reqId]) {
            throw new Error("request was already sent")
        }
        handler.Send(to, JSON.stringify(message))
        clientCbs[reqId] = {
            type: 'stream',
            f: (response: any) => { cb(response) }
        }
    }
    return NewNostrClient({
        retrieveNostrUserAuth: async () => { return nostrPublicKey },
        pubDestination,
    }, clientSend, clientSub)
}


function makeId(length: number) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

//@ts-ignore use this to have access to the client from the console
// global.nostr = nostr // TODO: remove,DEV ONLY