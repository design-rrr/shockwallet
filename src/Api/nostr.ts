import { generatePrivateKey, getPublicKey } from 'nostr-tools'
import { NOSTR_PRIVATE_KEY_STORAGE_KEY, NOSTR_PUBLIC_KEY_STORAGE_KEY, NOSTR_PUB_DESTINATION, NOSTR_RELAYS } from '../constants'
import { NostrRequest } from './autogenerated/ts/nostr_transport'
import NewNostrClient from './autogenerated/ts/nostr_client'
import NostrHandler from './nostrHandler'
import { Buffer } from 'buffer'
export const setNostrPrivateKey = () => {
    localStorage.setItem(NOSTR_PRIVATE_KEY_STORAGE_KEY, nostrPrivateKey || "")
    localStorage.setItem(NOSTR_PUBLIC_KEY_STORAGE_KEY, nostrPublicKey || "")
}
const getNostrPrivateKey = () => {
    return localStorage.getItem(NOSTR_PRIVATE_KEY_STORAGE_KEY)
}
let nostrPrivateKey = getNostrPrivateKey()
if (!nostrPrivateKey) {
    nostrPrivateKey = generatePrivateKey()
    // setNostrPrivateKey(nostrPrivateKey)
}
const nostrPublicKey = getPublicKey(Buffer.from(nostrPrivateKey, 'hex'))

const clients: Record<string, ReturnType<typeof NewNostrClient>> = {}

export const getNostrClient = (pub: string, relays?: string[]) => {
    const c = clients[pub]
    if (c) {
        return c
    }
    if (!relays) {
        throw new Error("cannot create client if no relays are provided")
    }
    clients[pub] = createNostrClient(pub, relays)
    return clients[pub]
}

const createNostrClient = (pubDestination: string, relays: string[]) => {
    const clientCbs: Record<string, (res: any) => void> = {}
    const handler = new NostrHandler({
        privateKey: nostrPrivateKey!,
        publicKey: nostrPublicKey,
        relays
    }, e => {
        const res = JSON.parse(e.content) as { requestId: string }
        if (clientCbs[res.requestId]) {
            console.log("cb found")
            const cb = clientCbs[res.requestId]
            cb(res)
            delete clientCbs[res.requestId]
        } else {
            console.log("cb not found")
        }
    })
    const clientSend = (to: string, message: NostrRequest): Promise<any> => {
        console.log("sending to", to, message)
        if (!message.requestId) {
            message.requestId = makeId(16)
        }
        const reqId = message.requestId
        if (clientCbs[reqId]) {
            throw new Error("request was already sent")
        }
        handler.Send(to, JSON.stringify(message))
        return new Promise(res => {
            clientCbs[reqId] = (response: any) => {
                res(response)
            }
        })
    }
    return NewNostrClient({
        retrieveNostrUserAuth: async () => { return nostrPublicKey },
        pubDestination,
    }, clientSend)
}



function makeId(length: number) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

//@ts-ignore use this to have access to the client from the console
// global.nostr = nostr // TODO: remove,DEV ONLY