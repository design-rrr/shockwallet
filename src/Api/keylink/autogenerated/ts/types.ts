// This file was autogenerated from a .proto file, DO NOT EDIT!

export type GuestContext = {
}
export type AdminContext = {
    admin_id: string
}
export type AppContext = {
    app_id: string
}
export type AuthContext = GuestContext | AdminContext | AppContext

export type Health_Query = {
}
export type Health_RouteParams = {
}
export type Health_Context = Health_Query & Health_RouteParams & GuestContext
export type AddApp_Query = {
}
export type AddApp_RouteParams = {
}
export type AddApp_Context = AddApp_Query & AddApp_RouteParams & AdminContext
export type AuthApp_Query = {
}
export type AuthApp_RouteParams = {
}
export type AuthApp_Context = AuthApp_Query & AuthApp_RouteParams & AdminContext
export type GetApp_Query = {
}
export type GetApp_RouteParams = {
}
export type GetApp_Context = GetApp_Query & GetApp_RouteParams & AppContext
export type AddAppUser_Query = {
}
export type AddAppUser_RouteParams = {
}
export type AddAppUser_Context = AddAppUser_Query & AddAppUser_RouteParams & AppContext
export type GetAppUser_Query = {
}
export type GetAppUser_RouteParams = {
}
export type GetAppUser_Context = GetAppUser_Query & GetAppUser_RouteParams & AppContext
export type MergeAppUsers_Query = {
}
export type MergeAppUsers_RouteParams = {
}
export type MergeAppUsers_Context = MergeAppUsers_Query & MergeAppUsers_RouteParams & AppContext
export type ValidateAuthCode_Query = {
}
export type ValidateAuthCode_RouteParams = {
}
export type ValidateAuthCode_Context = ValidateAuthCode_Query & ValidateAuthCode_RouteParams & AppContext
export type AddNsecToAppUser_Query = {
}
export type AddNsecToAppUser_RouteParams = {
}
export type AddNsecToAppUser_Context = AddNsecToAppUser_Query & AddNsecToAppUser_RouteParams & GuestContext
export type RequestUserAuth_Query = {
}
export type RequestUserAuth_RouteParams = {
}
export type RequestUserAuth_Context = RequestUserAuth_Query & RequestUserAuth_RouteParams & GuestContext
export type GetAppInfo_Query = {
}
export type GetAppInfo_RouteParams = {
}
export type GetAppInfo_Context = GetAppInfo_Query & GetAppInfo_RouteParams & GuestContext
export type LinkAppUserToEmail_Query = {
}
export type LinkAppUserToEmail_RouteParams = {
}
export type LinkAppUserToEmail_Context = LinkAppUserToEmail_Query & LinkAppUserToEmail_RouteParams & GuestContext
export type AuthCallback_Query = {
    id?: string
}
export type AuthCallback_RouteParams = {
}
export type AuthCallback_Context = AuthCallback_Query & AuthCallback_RouteParams & GuestContext
export type LinkCallback_Query = {
    id?: string
}
export type LinkCallback_RouteParams = {
}
export type LinkCallback_Context = LinkCallback_Query & LinkCallback_RouteParams & GuestContext
export type AuthInfo_Query = {
}
export type AuthInfo_RouteParams = {
}
export type AuthInfo_Context = AuthInfo_Query & AuthInfo_RouteParams & GuestContext
export type ServerMethods = {
    Health?: (ctx: Health_Context) => Promise<void>
    AddApp?: (ctx: AddApp_Context, req: AddAppRequest) => Promise<AuthApp>
    AuthApp?: (ctx: AuthApp_Context, req: AuthAppRequest) => Promise<AuthApp>
    GetApp?: (ctx: GetApp_Context) => Promise<Application>
    AddAppUser?: (ctx: AddAppUser_Context, req: AddAppUserRequest) => Promise<AppUser>
    GetAppUser?: (ctx: GetAppUser_Context, req: GetAppUserRequest) => Promise<AppUser>
    MergeAppUsers?: (ctx: MergeAppUsers_Context, req: MergeAppUsers) => Promise<void>
    ValidateAuthCode?: (ctx: ValidateAuthCode_Context, req: ValidateAuthCode) => Promise<AppUser>
    AddNsecToAppUser?: (ctx: AddNsecToAppUser_Context, req: AddNsecToAppUser) => Promise<AppUser>
    RequestUserAuth?: (ctx: RequestUserAuth_Context, req: RequestUserAuth) => Promise<void>
    GetAppInfo?: (ctx: GetAppInfo_Context, req: GetAppInfo) => Promise<Application>
    LinkAppUserToEmail?: (ctx: LinkAppUserToEmail_Context, req: LinkAppUserToEmail) => Promise<void>
    AuthCallback?: (ctx: AuthCallback_Context) => Promise<RedirectResponse>
    LinkCallback?: (ctx: LinkCallback_Context) => Promise<void>
    AuthInfo?: (ctx: AuthInfo_Context, req: AuthInfoRequest) => Promise<AuthInfoResponse>
}


export type OptionsBaseMessage = {
    allOptionalsAreSet?: true
}

export type RedirectResponse = {
    url: string
}
export const RedirectResponseOptionalFields: [] = []
export type RedirectResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    url_CustomCheck?: (v: string) => boolean
}
export const RedirectResponseValidate = (o?: RedirectResponse, opts: RedirectResponseOptions = {}, path: string = 'RedirectResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.url !== 'string') return new Error(`${path}.url: is not a string`)
    if (opts.url_CustomCheck && !opts.url_CustomCheck(o.url)) return new Error(`${path}.url: custom check failed`)

    return null
}

export type AddNsecToAppUser = {
    app_id: string
    identifier: string
    nostr_secret: string
}
export const AddNsecToAppUserOptionalFields: [] = []
export type AddNsecToAppUserOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    app_id_CustomCheck?: (v: string) => boolean
    identifier_CustomCheck?: (v: string) => boolean
    nostr_secret_CustomCheck?: (v: string) => boolean
}
export const AddNsecToAppUserValidate = (o?: AddNsecToAppUser, opts: AddNsecToAppUserOptions = {}, path: string = 'AddNsecToAppUser::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.app_id !== 'string') return new Error(`${path}.app_id: is not a string`)
    if (opts.app_id_CustomCheck && !opts.app_id_CustomCheck(o.app_id)) return new Error(`${path}.app_id: custom check failed`)

    if (typeof o.identifier !== 'string') return new Error(`${path}.identifier: is not a string`)
    if (opts.identifier_CustomCheck && !opts.identifier_CustomCheck(o.identifier)) return new Error(`${path}.identifier: custom check failed`)

    if (typeof o.nostr_secret !== 'string') return new Error(`${path}.nostr_secret: is not a string`)
    if (opts.nostr_secret_CustomCheck && !opts.nostr_secret_CustomCheck(o.nostr_secret)) return new Error(`${path}.nostr_secret: custom check failed`)

    return null
}

export type AddAppRequest = {
    name: string
    callback_url: string
}
export const AddAppRequestOptionalFields: [] = []
export type AddAppRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    name_CustomCheck?: (v: string) => boolean
    callback_url_CustomCheck?: (v: string) => boolean
}
export const AddAppRequestValidate = (o?: AddAppRequest, opts: AddAppRequestOptions = {}, path: string = 'AddAppRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.name !== 'string') return new Error(`${path}.name: is not a string`)
    if (opts.name_CustomCheck && !opts.name_CustomCheck(o.name)) return new Error(`${path}.name: custom check failed`)

    if (typeof o.callback_url !== 'string') return new Error(`${path}.callback_url: is not a string`)
    if (opts.callback_url_CustomCheck && !opts.callback_url_CustomCheck(o.callback_url)) return new Error(`${path}.callback_url: custom check failed`)

    return null
}

export type AuthInfoResponse = {
    app_name: string
    email: string
    is_link: boolean
}
export const AuthInfoResponseOptionalFields: [] = []
export type AuthInfoResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    app_name_CustomCheck?: (v: string) => boolean
    email_CustomCheck?: (v: string) => boolean
    is_link_CustomCheck?: (v: boolean) => boolean
}
export const AuthInfoResponseValidate = (o?: AuthInfoResponse, opts: AuthInfoResponseOptions = {}, path: string = 'AuthInfoResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.app_name !== 'string') return new Error(`${path}.app_name: is not a string`)
    if (opts.app_name_CustomCheck && !opts.app_name_CustomCheck(o.app_name)) return new Error(`${path}.app_name: custom check failed`)

    if (typeof o.email !== 'string') return new Error(`${path}.email: is not a string`)
    if (opts.email_CustomCheck && !opts.email_CustomCheck(o.email)) return new Error(`${path}.email: custom check failed`)

    if (typeof o.is_link !== 'boolean') return new Error(`${path}.is_link: is not a boolean`)
    if (opts.is_link_CustomCheck && !opts.is_link_CustomCheck(o.is_link)) return new Error(`${path}.is_link: custom check failed`)

    return null
}

export type RequestUserAuth = {
    email: string
    app_id: string
    destination?: string
    code_only?: boolean
}
export type RequestUserAuthOptionalField = 'destination' | 'code_only'
export const RequestUserAuthOptionalFields: RequestUserAuthOptionalField[] = ['destination', 'code_only']
export type RequestUserAuthOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: RequestUserAuthOptionalField[]
    email_CustomCheck?: (v: string) => boolean
    app_id_CustomCheck?: (v: string) => boolean
    destination_CustomCheck?: (v?: string) => boolean
    code_only_CustomCheck?: (v?: boolean) => boolean
}
export const RequestUserAuthValidate = (o?: RequestUserAuth, opts: RequestUserAuthOptions = {}, path: string = 'RequestUserAuth::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.email !== 'string') return new Error(`${path}.email: is not a string`)
    if (opts.email_CustomCheck && !opts.email_CustomCheck(o.email)) return new Error(`${path}.email: custom check failed`)

    if (typeof o.app_id !== 'string') return new Error(`${path}.app_id: is not a string`)
    if (opts.app_id_CustomCheck && !opts.app_id_CustomCheck(o.app_id)) return new Error(`${path}.app_id: custom check failed`)

    if ((o.destination || opts.allOptionalsAreSet || opts.checkOptionalsAreSet?.includes('destination')) && typeof o.destination !== 'string') return new Error(`${path}.destination: is not a string`)
    if (opts.destination_CustomCheck && !opts.destination_CustomCheck(o.destination)) return new Error(`${path}.destination: custom check failed`)

    if ((o.code_only || opts.allOptionalsAreSet || opts.checkOptionalsAreSet?.includes('code_only')) && typeof o.code_only !== 'boolean') return new Error(`${path}.code_only: is not a boolean`)
    if (opts.code_only_CustomCheck && !opts.code_only_CustomCheck(o.code_only)) return new Error(`${path}.code_only: custom check failed`)

    return null
}

export type LinkAppUserToEmail = {
    identifier: string
    email: string
    app_id: string
    nostr_secret?: string
}
export type LinkAppUserToEmailOptionalField = 'nostr_secret'
export const LinkAppUserToEmailOptionalFields: LinkAppUserToEmailOptionalField[] = ['nostr_secret']
export type LinkAppUserToEmailOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: LinkAppUserToEmailOptionalField[]
    identifier_CustomCheck?: (v: string) => boolean
    email_CustomCheck?: (v: string) => boolean
    app_id_CustomCheck?: (v: string) => boolean
    nostr_secret_CustomCheck?: (v?: string) => boolean
}
export const LinkAppUserToEmailValidate = (o?: LinkAppUserToEmail, opts: LinkAppUserToEmailOptions = {}, path: string = 'LinkAppUserToEmail::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.identifier !== 'string') return new Error(`${path}.identifier: is not a string`)
    if (opts.identifier_CustomCheck && !opts.identifier_CustomCheck(o.identifier)) return new Error(`${path}.identifier: custom check failed`)

    if (typeof o.email !== 'string') return new Error(`${path}.email: is not a string`)
    if (opts.email_CustomCheck && !opts.email_CustomCheck(o.email)) return new Error(`${path}.email: custom check failed`)

    if (typeof o.app_id !== 'string') return new Error(`${path}.app_id: is not a string`)
    if (opts.app_id_CustomCheck && !opts.app_id_CustomCheck(o.app_id)) return new Error(`${path}.app_id: custom check failed`)

    if ((o.nostr_secret || opts.allOptionalsAreSet || opts.checkOptionalsAreSet?.includes('nostr_secret')) && typeof o.nostr_secret !== 'string') return new Error(`${path}.nostr_secret: is not a string`)
    if (opts.nostr_secret_CustomCheck && !opts.nostr_secret_CustomCheck(o.nostr_secret)) return new Error(`${path}.nostr_secret: custom check failed`)

    return null
}

export type Empty = {
}
export const EmptyOptionalFields: [] = []
export type EmptyOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
}
export const EmptyValidate = (o?: Empty, opts: EmptyOptions = {}, path: string = 'Empty::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    return null
}

export type UserInfo = {
    userId: string
    email: string
}
export const UserInfoOptionalFields: [] = []
export type UserInfoOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    userId_CustomCheck?: (v: string) => boolean
    email_CustomCheck?: (v: string) => boolean
}
export const UserInfoValidate = (o?: UserInfo, opts: UserInfoOptions = {}, path: string = 'UserInfo::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.userId !== 'string') return new Error(`${path}.userId: is not a string`)
    if (opts.userId_CustomCheck && !opts.userId_CustomCheck(o.userId)) return new Error(`${path}.userId: custom check failed`)

    if (typeof o.email !== 'string') return new Error(`${path}.email: is not a string`)
    if (opts.email_CustomCheck && !opts.email_CustomCheck(o.email)) return new Error(`${path}.email: custom check failed`)

    return null
}

export type GetAppInfo = {
    id: string
}
export const GetAppInfoOptionalFields: [] = []
export type GetAppInfoOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    id_CustomCheck?: (v: string) => boolean
}
export const GetAppInfoValidate = (o?: GetAppInfo, opts: GetAppInfoOptions = {}, path: string = 'GetAppInfo::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.id !== 'string') return new Error(`${path}.id: is not a string`)
    if (opts.id_CustomCheck && !opts.id_CustomCheck(o.id)) return new Error(`${path}.id: custom check failed`)

    return null
}

export type Application = {
    name: string
    id: string
    callback_url: string
}
export const ApplicationOptionalFields: [] = []
export type ApplicationOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    name_CustomCheck?: (v: string) => boolean
    id_CustomCheck?: (v: string) => boolean
    callback_url_CustomCheck?: (v: string) => boolean
}
export const ApplicationValidate = (o?: Application, opts: ApplicationOptions = {}, path: string = 'Application::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.name !== 'string') return new Error(`${path}.name: is not a string`)
    if (opts.name_CustomCheck && !opts.name_CustomCheck(o.name)) return new Error(`${path}.name: custom check failed`)

    if (typeof o.id !== 'string') return new Error(`${path}.id: is not a string`)
    if (opts.id_CustomCheck && !opts.id_CustomCheck(o.id)) return new Error(`${path}.id: custom check failed`)

    if (typeof o.callback_url !== 'string') return new Error(`${path}.callback_url: is not a string`)
    if (opts.callback_url_CustomCheck && !opts.callback_url_CustomCheck(o.callback_url)) return new Error(`${path}.callback_url: custom check failed`)

    return null
}

export type AuthApp = {
    app: Application
    auth_token: string
}
export const AuthAppOptionalFields: [] = []
export type AuthAppOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    app_Options?: ApplicationOptions
    auth_token_CustomCheck?: (v: string) => boolean
}
export const AuthAppValidate = (o?: AuthApp, opts: AuthAppOptions = {}, path: string = 'AuthApp::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    const appErr = ApplicationValidate(o.app, opts.app_Options, `${path}.app`)
    if (appErr !== null) return appErr
    

    if (typeof o.auth_token !== 'string') return new Error(`${path}.auth_token: is not a string`)
    if (opts.auth_token_CustomCheck && !opts.auth_token_CustomCheck(o.auth_token)) return new Error(`${path}.auth_token: custom check failed`)

    return null
}

export type ValidateAuthCode = {
    code: string
}
export const ValidateAuthCodeOptionalFields: [] = []
export type ValidateAuthCodeOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    code_CustomCheck?: (v: string) => boolean
}
export const ValidateAuthCodeValidate = (o?: ValidateAuthCode, opts: ValidateAuthCodeOptions = {}, path: string = 'ValidateAuthCode::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.code !== 'string') return new Error(`${path}.code: is not a string`)
    if (opts.code_CustomCheck && !opts.code_CustomCheck(o.code)) return new Error(`${path}.code: custom check failed`)

    return null
}

export type AuthInfoRequest = {
    id: string
}
export const AuthInfoRequestOptionalFields: [] = []
export type AuthInfoRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    id_CustomCheck?: (v: string) => boolean
}
export const AuthInfoRequestValidate = (o?: AuthInfoRequest, opts: AuthInfoRequestOptions = {}, path: string = 'AuthInfoRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.id !== 'string') return new Error(`${path}.id: is not a string`)
    if (opts.id_CustomCheck && !opts.id_CustomCheck(o.id)) return new Error(`${path}.id: custom check failed`)

    return null
}

export type AuthAppRequest = {
    name: string
    callback_url?: string
}
export type AuthAppRequestOptionalField = 'callback_url'
export const AuthAppRequestOptionalFields: AuthAppRequestOptionalField[] = ['callback_url']
export type AuthAppRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: AuthAppRequestOptionalField[]
    name_CustomCheck?: (v: string) => boolean
    callback_url_CustomCheck?: (v?: string) => boolean
}
export const AuthAppRequestValidate = (o?: AuthAppRequest, opts: AuthAppRequestOptions = {}, path: string = 'AuthAppRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.name !== 'string') return new Error(`${path}.name: is not a string`)
    if (opts.name_CustomCheck && !opts.name_CustomCheck(o.name)) return new Error(`${path}.name: custom check failed`)

    if ((o.callback_url || opts.allOptionalsAreSet || opts.checkOptionalsAreSet?.includes('callback_url')) && typeof o.callback_url !== 'string') return new Error(`${path}.callback_url: is not a string`)
    if (opts.callback_url_CustomCheck && !opts.callback_url_CustomCheck(o.callback_url)) return new Error(`${path}.callback_url: custom check failed`)

    return null
}

export type AddAppUserRequest = {
    identifier: string
    fail_if_exists: boolean
}
export const AddAppUserRequestOptionalFields: [] = []
export type AddAppUserRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    identifier_CustomCheck?: (v: string) => boolean
    fail_if_exists_CustomCheck?: (v: boolean) => boolean
}
export const AddAppUserRequestValidate = (o?: AddAppUserRequest, opts: AddAppUserRequestOptions = {}, path: string = 'AddAppUserRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.identifier !== 'string') return new Error(`${path}.identifier: is not a string`)
    if (opts.identifier_CustomCheck && !opts.identifier_CustomCheck(o.identifier)) return new Error(`${path}.identifier: custom check failed`)

    if (typeof o.fail_if_exists !== 'boolean') return new Error(`${path}.fail_if_exists: is not a boolean`)
    if (opts.fail_if_exists_CustomCheck && !opts.fail_if_exists_CustomCheck(o.fail_if_exists)) return new Error(`${path}.fail_if_exists: custom check failed`)

    return null
}

export type AppUser = {
    identifier: string
    info: UserInfo
}
export const AppUserOptionalFields: [] = []
export type AppUserOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    identifier_CustomCheck?: (v: string) => boolean
    info_Options?: UserInfoOptions
}
export const AppUserValidate = (o?: AppUser, opts: AppUserOptions = {}, path: string = 'AppUser::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.identifier !== 'string') return new Error(`${path}.identifier: is not a string`)
    if (opts.identifier_CustomCheck && !opts.identifier_CustomCheck(o.identifier)) return new Error(`${path}.identifier: custom check failed`)

    const infoErr = UserInfoValidate(o.info, opts.info_Options, `${path}.info`)
    if (infoErr !== null) return infoErr
    

    return null
}

export type GetAppUserRequest = {
    user_identifier: string
}
export const GetAppUserRequestOptionalFields: [] = []
export type GetAppUserRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    user_identifier_CustomCheck?: (v: string) => boolean
}
export const GetAppUserRequestValidate = (o?: GetAppUserRequest, opts: GetAppUserRequestOptions = {}, path: string = 'GetAppUserRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.user_identifier !== 'string') return new Error(`${path}.user_identifier: is not a string`)
    if (opts.user_identifier_CustomCheck && !opts.user_identifier_CustomCheck(o.user_identifier)) return new Error(`${path}.user_identifier: custom check failed`)

    return null
}

export type MergeAppUsers = {
    from_user_identifier: string
    to_user_identifier: string
}
export const MergeAppUsersOptionalFields: [] = []
export type MergeAppUsersOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    from_user_identifier_CustomCheck?: (v: string) => boolean
    to_user_identifier_CustomCheck?: (v: string) => boolean
}
export const MergeAppUsersValidate = (o?: MergeAppUsers, opts: MergeAppUsersOptions = {}, path: string = 'MergeAppUsers::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.from_user_identifier !== 'string') return new Error(`${path}.from_user_identifier: is not a string`)
    if (opts.from_user_identifier_CustomCheck && !opts.from_user_identifier_CustomCheck(o.from_user_identifier)) return new Error(`${path}.from_user_identifier: custom check failed`)

    if (typeof o.to_user_identifier !== 'string') return new Error(`${path}.to_user_identifier: is not a string`)
    if (opts.to_user_identifier_CustomCheck && !opts.to_user_identifier_CustomCheck(o.to_user_identifier)) return new Error(`${path}.to_user_identifier: custom check failed`)

    return null
}

