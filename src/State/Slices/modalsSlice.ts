import { PayloadAction, createSlice } from '@reduxjs/toolkit';
import { DebitAuthorization, LiveDebitRequest, LiveManageRequest } from '../../Api/pub/autogenerated/ts/types';
import { PayTo, SpendFrom } from '../../globalTypes';

type ModalRequest = { request: LiveDebitRequest, sourceId: string }
type ManageRequest = { request: LiveManageRequest, sourceId: string }
export type EditDebit = DebitAuthorization & { sourceId: string, domainName?: string, avatarUrl?: string }

export type SourceToEdit = {
	type: "payTo";
	source: PayTo;
} | {
	type: "spendFrom";
	source: SpendFrom;
} | null
interface State {
	debitRequests: ModalRequest[]
	editDebit: EditDebit | null;
	debitsRefetchHook: number
	sourceToEdit: SourceToEdit
	manageRequests?: ManageRequest[]
	manageRequestsRefetchHook?: number
}






const modalsSlice = createSlice({
	name: "modals",
	initialState: { debitRequests: [], editDebit: null, debitsRefetchHook: 0, sourceToEdit: null } as State,
	reducers: {
		refetchDebits: (state) => {
			state.debitsRefetchHook = Math.random();
		},
		refetchManageRequests: (state) => {
			state.manageRequestsRefetchHook = Math.random();
		},
		// add debit modal
		addDebitRequest: (state, action: PayloadAction<ModalRequest>) => {
			state.debitRequests.push(action.payload);
		},
		removeDebitRequest: (state, action: PayloadAction<{ requestorNpub: string, sourceId: string }>) => {
			state.debitRequests = state.debitRequests.filter(debit => debit.request.npub !== action.payload.requestorNpub && debit.sourceId !== action.payload.sourceId);
		},

		// edit debit modal
		setDebitToEdit: (state, action: PayloadAction<EditDebit | null>) => {
			state.editDebit = action.payload;
		},

		// edit source modal
		setSourceToEdit: (state, action: PayloadAction<SourceToEdit>) => {
			state.sourceToEdit = action.payload;
		},
		// manage request modal
		addManageRequest: (state, action: PayloadAction<ManageRequest>) => {
			if (!state.manageRequests) state.manageRequests = [];
			state.manageRequests.push(action.payload);
		},
		removeManageRequest: (state, action: PayloadAction<{ requestorNpub: string, sourceId: string }>) => {
			if (!state.manageRequests) return;
			state.manageRequests = state.manageRequests.filter(manage => manage.request.npub !== action.payload.requestorNpub && manage.sourceId !== action.payload.sourceId);
		},
	},

});

export const { addDebitRequest, removeDebitRequest, setDebitToEdit, refetchDebits, setSourceToEdit, addManageRequest, removeManageRequest, refetchManageRequests } = modalsSlice.actions;
export default modalsSlice.reducer;
