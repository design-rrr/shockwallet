import {
	IonButton,
	IonButtons,
	IonCheckbox,
	IonChip,
	IonContent,
	IonHeader,
	IonInput,
	IonItem,
	IonLabel,
	IonList,
	IonListHeader,
	IonModal,
	IonSpinner,
	IonText,
	IonTitle,
	IonToolbar,
	isPlatform
} from "@ionic/react";
import styles from "./styles/index.module.scss";
import { DndProvider, } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { TouchBackend } from "react-dnd-touch-backend";
import type { OfferConfig, OfferInvoice } from "@/Api/pub/autogenerated/ts/types";
import { useCallback, useEffect, useMemo, useState } from "react";
import deepEqual from "fast-deep-equal";
import AmountInput from "@/Components/AmountInput";
import { useAmountInput } from "@/Components/AmountInput/useAmountInput";
import PayerDataEditor from "./PayerDataEditor";
import WebhookUrlBuilder from "./WebhookBuilder";
import { expandAndHighlight } from "./WebhookBuilder/utils/jsxHelpers";
import { formatSatoshi } from "@/lib/units";
import { Satoshi } from "@/lib/types/units";
import CodeBox from "./CodeBox";
import OfferInvoiceItem from "@/Components/OfferInvoiceItem";
import EmptyState from "@/Components/common/ui/emptyState";
import moment from "moment";

const backend = isPlatform("mobile") ? TouchBackend : HTML5Backend;

const emptyOffer = (): OfferConfig => {
	return {
		callback_url: "",
		default_offer: false,
		payer_data: [],
		label: "",
		noffer: "",
		offer_id: "",
		price_sats: 0,
		token: "",
		createdAtUnix: 0,
		updatedAtUnix: 0,
		rejectUnauthorized: true,
		blind: false
	};
}

interface Props {
	isOpen: boolean;
	onClose: () => void;
	onSave: (offer: OfferConfig, isNew: boolean) => void | Promise<void>;
	initialOffer?: OfferConfig;
	fetchOfferInvoice: (offerId: string) => Promise<OfferInvoice[] | null>
}

const OfferInfoModal = ({ isOpen, onClose, onSave, initialOffer, fetchOfferInvoice }: Props) => {
	const amountInput = useAmountInput({});

	const isNew = !initialOffer;
	const [editMode, setEditMode] = useState(isNew);
	const [draft, setDraft] = useState<OfferConfig>(initialOffer || emptyOffer());
	const [isUrlValid, setIsUrlValid] = useState(true);
	const [isSpontaneous, setIsSpontaneous] = useState(initialOffer ? initialOffer.price_sats === 0 : true);
	const [invoiceLoading, setInvoicesLoading] = useState(true);
	const [invoices, setInvoices] = useState<OfferInvoice[]>([]);



	// Reset states whenever we reopen the modal
	useEffect(() => {
		if (isOpen) {
			setDraft(initialOffer ?? emptyOffer());
			setInvoices([]);
			setEditMode(isNew);
			amountInput.clearFixed();
			amountInput.typeAmount(initialOffer?.price_sats.toString() || "");
			setIsSpontaneous(initialOffer ? initialOffer.price_sats === 0 : true);

			if (initialOffer) {
				setInvoicesLoading(true);
				fetchOfferInvoice(initialOffer.offer_id)
					.then(res => {
						if (res) {
							setInvoices(res);
						}
						setInvoicesLoading(false);

					})
			}
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [isOpen, initialOffer]);


	const change = useCallback(<K extends keyof OfferConfig>(key: K, val: OfferConfig[K]) => {
		setDraft(d => ({ ...d, [key]: val }));
	}, []);


	// When amountInput.effectiveSats changes, update draft.price_sats
	useEffect(() => {
		change("price_sats", amountInput.effectiveSats || 0);
	}, [amountInput.effectiveSats, change])



	const pristineSnapshot = useMemo(
		() => (initialOffer ? initialOffer : emptyOffer()),
		[initialOffer]
	);

	const isDirty = useMemo(
		() => !deepEqual(draft, pristineSnapshot),
		[draft, pristineSnapshot]
	);



	const handleModeChange = (spon: boolean) => {
		setIsSpontaneous(spon);
		if (spon) {
			amountInput.clearFixed();
			amountInput.typeAmount('');
		}
	};

	const doSave = async () => {
		onSave(
			{ ...draft },
			isNew
		)
	}


	return (
		<IonModal
			isOpen={isOpen}
			onDidDismiss={onClose}
			style={{ "--background": "var(--ion-color-secondary)" }}
			className="wallet-modal big-desktop-modal"
		>
			<DndProvider backend={backend}>
				<IonHeader>
					<IonToolbar>
						<IonButtons slot="start">
							<IonButton onClick={onClose}>
								Cancel
							</IonButton>
						</IonButtons>
						<IonTitle className="android-centered-title">
							{isNew ? "New Offer" : editMode ? "Edit Offer" : "Offer Details"}
						</IonTitle>
						<IonButtons slot="end">
							{
								editMode ? (
									<IonButton
										disabled={
											!isDirty ||
											!isUrlValid ||
											!draft.label.trim()
										}
										onClick={doSave}
										color="primary"
										strong
									>
										Save
									</IonButton>
								) : (
									<IonButton strong color="primary" onClick={() => setEditMode(true)}>Edit</IonButton>
								)
							}

						</IonButtons>
					</IonToolbar>
				</IonHeader>

				<IonContent className="ion-padding">

					{
						editMode ? (
							<>
								<IonList lines="none" style={{ borderRadius: "12px" }}>
									<IonItem className={styles["edit-item-input"]}>

										<IonInput
											color="primary"
											labelPlacement="stacked"
											label="Label"
											value={draft.label}
											onIonInput={e => change("label", e.detail.value || "")}
											mode="md"
											fill="outline"
											style={{ "--padding-end": "50px" }}
											className="ion-margin-top"

										/>
									</IonItem>
								</IonList>

								<IonList className={styles["edit-list"]} lines="none">

									<IonListHeader className="text-medium" style={{ fontWeight: "600", fontSize: "1rem" }} lines="full">
										<IonLabel >Offer Price</IonLabel>
									</IonListHeader>




									<IonItem className={styles["edit-item-input"]}>
										<AmountInput
											labelPlacement="stacked"
											unit={amountInput.unit}
											displayValue={amountInput.displayValue}
											limits={amountInput.limits}
											isDisabled={amountInput.inputDisabled || isSpontaneous}
											effectiveSats={amountInput.effectiveSats}
											error={amountInput.error}
											onType={amountInput.typeAmount}
											onPressMax={amountInput.pressMax}
											onToggleUnit={amountInput.toggleUnit}
											mode="md"
											fill="outline"
											className="ion-margin-top"
											label="Price"
											placeholder="Enter price"
										/>
									</IonItem>
									<div className="ion-padding-horizontal ion-padding-bottom">

										<IonCheckbox
											checked={isSpontaneous}
											justify="start"
											onIonChange={e => handleModeChange(e.detail.checked)}
											className="text-low"
											style={{ fontWeight: "600", fontSize: "0.85rem" }}
										>
											Spontaneous (payer chooses price)
										</IonCheckbox>
									</div>

								</IonList>

								<PayerDataEditor
									value={draft.payer_data}
									change={change}
								/>
								<WebhookUrlBuilder
									url={draft.callback_url}
									change={change}
									rows={draft.payer_data}
									onValidityChange={(valid) => setIsUrlValid(valid)}
									forceSSL={draft.rejectUnauthorized}
									token={draft.token}
								/>
								<IonList className={styles["edit-list"]} lines="none">
									<IonItem>
										<IonCheckbox
											checked={draft.blind}
											onIonChange={(e) => change("blind", e.detail.checked)}
										/>
										<IonLabel style={{ marginLeft: "15px" }}>
											Blinded Path
										</IonLabel>
									</IonItem>
								</IonList>
							</>
						) : (
							<>
								<IonList className={styles["edit-list"]} lines="none">
									<IonListHeader className="text-medium" style={{ fontWeight: "600", fontSize: "1rem" }} lines="full">
										<IonLabel >Basic Offer Info</IonLabel>
									</IonListHeader>
									<IonItem>
										<IonLabel color="primary">Label</IonLabel>
										<IonText className="text-medium">{draft.label}</IonText>
									</IonItem>
									<IonItem>
										<IonLabel color="primary">Price</IonLabel>
										{
											draft.price_sats === 0
												? (
													<IonText className="text-low" style={{ display: "flex", alignItems: "center" }}>
														Spontaneous
													</IonText>
												) : (
													<IonText className={styles["value-text"]}>{formatSatoshi(draft.price_sats as Satoshi)} sats</IonText>
												)
										}
									</IonItem>
									<IonItem>
										<IonLabel color="primary">
											Payer data
											{

												draft.payer_data.length !== 0 && (
													<div className="ion-padding-horizontal ion-margin-top" style={{
														display: 'flex',
														flexWrap: 'wrap',

														alignItems: 'center',
													}}>
														<div style={{
															display: 'flex',
															flexWrap: 'wrap',
															gap: '8px',
														}}>
															{draft.payer_data.map(k => (
																<IonChip key={k} color="primary" className="key-chip">
																	{k}
																</IonChip>
															))}
														</div>
													</div>
												)
											}
										</IonLabel>
										{
											draft.payer_data.length === 0 && (
												<IonText className="text-quiet" style={{ opacity: 0.8 }}>&lt;No payer data&gt;</IonText>
											)
										}
									</IonItem>
									<IonItem>
										<IonLabel color="primary">
											Callback URL
											{
												draft.callback_url && (
													<div>
														<CodeBox label="" value={expandAndHighlight(draft.callback_url, draft.payer_data)} />
													</div>
												)
											}
										</IonLabel>
										{
											!draft.callback_url && (
												<IonText className="text-quiet" style={{ opacity: 0.8 }}>
													&lt;No callback URL&gt;
												</IonText>
											)
										}
									</IonItem>
									<IonItem>
										<IonLabel color="primary">Created</IonLabel>
										<IonText className="text-medium">{moment(draft.createdAtUnix).fromNow()}</IonText>
									</IonItem>
									<IonItem>
										<IonLabel color="primary">Blinded Path</IonLabel>
										<IonText className="text-medium">{draft.blind ? "Enabled" : "Disabled"}</IonText>
									</IonItem>
								</IonList>
								<IonList className={styles["edit-list"]} lines="none" style={{ minHeight: "18.7rem" }}>
									<IonListHeader className="text-medium" style={{ fontWeight: "600", fontSize: "1rem" }} lines="full">
										<IonLabel >Offer Invoices</IonLabel>
									</IonListHeader>
									{
										invoiceLoading ? (
											<div style={{ height: "18.7rem", display: "flex", justifyContent: "center", alignItems: "center" }}>
												<IonSpinner name="crescent" />
											</div>

										) : invoices.length === 0 ? (
											<div style={{ height: "18.7rem" }}>
												<EmptyState message="This offer has no invoices yet" />
											</div>
										) : (
											invoices.map(i => (
												<OfferInvoiceItem key={i.invoice} invoice={i} />
											))
										)
									}
								</IonList>
							</>
						)
					}
				</IonContent>
			</DndProvider>
		</IonModal>
	)
}

export default OfferInfoModal;
