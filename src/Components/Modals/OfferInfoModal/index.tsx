import {
	IonButton,
	IonButtons,
	IonChip,
	IonContent,
	IonHeader,
	IonInput,
	IonItem,
	IonLabel,
	IonList,
	IonListHeader,
	IonModal,
	IonRadio,
	IonRadioGroup,
	IonText,
	IonTitle,
	IonToolbar,
	isPlatform
} from "@ionic/react";
import styles from "./styles/index.module.scss";
import { DndProvider, } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { TouchBackend } from "react-dnd-touch-backend";
import { OfferConfig } from "@/Api/pub/autogenerated/ts/types";
import { useEffect, useMemo, useState } from "react";
import deepEqual from "fast-deep-equal";
import AmountInput from "@/Components/AmountInput";
import { useAmountInput } from "@/Components/AmountInput/useAmountInput";
import PayerDataEditor from "./PayerDataEditor";
import WebhookUrlBuilder from "./WebhookBuilder";
import { keysToPayerData } from "./utils";
import { expandAndHighlight } from "./WebhookBuilder/utils/jsxHelpers";
import { formatSatoshi } from "@/lib/units";
import { Satoshi } from "@/lib/types/units";
import CodeBox from "./CodeBox";

const backend = isPlatform("mobile") ? TouchBackend : HTML5Backend;

const emptyOffer = (): OfferConfig => {
	return {
		callback_url: "",
		default_offer: false,
		expected_data: {},
		label: "",
		noffer: "",
		offer_id: "",
		price_sats: 0,
	};
}

interface Props {
	isOpen: boolean;
	onClose: () => void;
	onSave: (offer: OfferConfig, isNew: boolean) => void | Promise<void>;
	initialOffer?: OfferConfig;
}

const OfferInfoModal = ({ isOpen, onClose, onSave, initialOffer }: Props) => {
	const amountInput = useAmountInput({});


	const isNew = !initialOffer;
	const [editMode, setEditMode] = useState(isNew);

	const [draft, setDraft] = useState<OfferConfig>(initialOffer || emptyOffer());

	const [url, setUrl] = useState(draft.callback_url ?? "");
	const [isUrlValid, setIsUrlValid] = useState(true);

	const [rows, setRows] = useState<string[]>([]);

	const [pricingMode, setPricingMode] = useState<'fixed' | 'spontaneous'>(
		initialOffer?.price_sats ? 'fixed' : 'spontaneous'
	);

	useEffect(() => {
		if (initialOffer) {
			setRows(Object.keys(initialOffer.expected_data));
		} else {
			setRows([]);
		}
	}, [initialOffer])



	// Reset states whenever we reopen the modal
	useEffect(() => {
		if (isOpen) {
			setDraft(initialOffer ?? emptyOffer());
			setEditMode(isNew);
			amountInput.clearFixed();
			amountInput.typeAmount(initialOffer?.price_sats.toString() || "");
			setUrl(initialOffer?.callback_url || "");
		}

		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [isOpen, initialOffer]);


	// When amountInput.effectiveSats changes, update draft.price_sats
	useEffect(() => {
		change("price_sats", amountInput.effectiveSats || 0);
	}, [amountInput.effectiveSats])

	useEffect(() => {
		change("callback_url", url);
	}, [url]);


	useEffect(() => {
		change("expected_data", keysToPayerData(rows));
	}, [rows]);


	const pristineSnapshot = useMemo(
		() => (initialOffer ? initialOffer : emptyOffer()),
		[initialOffer]
	);

	const isDirty = useMemo(
		() => !deepEqual(draft, pristineSnapshot),
		[draft, pristineSnapshot]
	);

	const change = <K extends keyof OfferConfig>(key: K, val: OfferConfig[K]) =>
		setDraft(d => ({ ...d, [key]: val }));


	const handleModeChange = (value: 'fixed' | 'spontaneous') => {
		setPricingMode(value);
		if (value === 'spontaneous') {
			amountInput.typeAmount('');
		}
	};

	const doSave = async () => {
		onSave(
			{ ...draft },
			isNew
		)
	}


	return (
		<IonModal
			isOpen={isOpen}
			onDidDismiss={onClose}
			style={{ "--background": "var(--ion-color-secondary)" }}
			className="wallet-modal big-desktop-modal"
		>
			<DndProvider backend={backend}>
				<IonHeader>
					<IonToolbar>
						<IonButtons slot="start">
							<IonButton onClick={onClose}>
								Cancel
							</IonButton>
						</IonButtons>
						<IonTitle className="android-centered-title">
							{isNew ? "New Offer" : editMode ? "Edit Offer" : "Offer Details"}
						</IonTitle>
						<IonButtons slot="end">
							{
								editMode ? (
									<IonButton
										disabled={
											!isDirty ||
											!isUrlValid ||
											!draft.label.trim()
										}
										onClick={doSave}
										color="primary"
										strong
									>
										Save
									</IonButton>
								) : (
									<IonButton strong color="primary" onClick={() => setEditMode(true)}>Edit</IonButton>
								)
							}

						</IonButtons>
					</IonToolbar>
				</IonHeader>

				<IonContent className="ion-padding">

					{
						editMode ? (
							<>
								<IonList lines="none" style={{ borderRadius: "12px" }}>
									<IonItem className={styles["edit-item-input"]}>

										<IonInput
											color="primary"
											labelPlacement="stacked"
											label="Label"
											value={draft.label}
											onIonInput={e => change("label", e.detail.value || "")}
											mode="md"
											fill="outline"
											style={{ "--padding-end": "50px" }}
											className="ion-margin-top"

										/>
									</IonItem>
								</IonList>

								<IonList className={styles["edit-list"]} lines="none">

									<IonListHeader className="text-medium" style={{ fontWeight: "600", fontSize: "1rem" }} lines="full">
										<IonLabel >Offer Price</IonLabel>
									</IonListHeader>


									<IonRadioGroup
										value={pricingMode}
										onIonChange={e => handleModeChange(e.detail.value)}
									>
										<IonItem>
											<IonRadio value="fixed" justify="space-between" className="text-low"
												style={{ fontWeight: "600", fontSize: "0.85rem" }}>
												Fixed
											</IonRadio>
										</IonItem>
										<IonItem>
											<IonRadio value="spontaneous" justify="space-between" className="text-low"
												style={{ fontWeight: "600", fontSize: "0.85rem" }}>
												Spontaneous (Payer chooses price)
											</IonRadio>
										</IonItem>
									</IonRadioGroup>


									<IonItem className={styles["edit-item-input"]}>
										<AmountInput
											labelPlacement="stacked"
											unit={amountInput.unit}
											displayValue={amountInput.displayValue}
											limits={amountInput.limits}
											isDisabled={amountInput.inputDisabled || pricingMode === 'spontaneous'}
											effectiveSats={amountInput.effectiveSats}
											error={amountInput.error}
											onType={amountInput.typeAmount}
											onPressMax={amountInput.pressMax}
											onToggleUnit={amountInput.toggleUnit}
											mode="md"
											fill="outline"
											className="ion-margin-top"
											label="Price"
											placeholder="Enter price"
										/>
									</IonItem>
								</IonList>

								<PayerDataEditor
									value={rows}
									onChange={setRows}
								/>
								<WebhookUrlBuilder
									url={url}
									setUrl={setUrl}
									rows={rows}
									onValidityChange={(valid) => setIsUrlValid(valid)}
								/>


							</>
						) : (
							<IonList className={styles["edit-list"]} lines="none">
								<IonItem>
									<IonLabel color="primary">Label</IonLabel>
									<IonText className="text-medium">{draft.label}</IonText>
								</IonItem>
								<IonItem>
									<IonLabel color="primary">Price</IonLabel>

									{
										draft.price_sats === 0
											? (
												<IonText className="text-low" style={{ display: "flex", alignItems: "center" }}>
													Spontaneous
												</IonText>
											) : (
												<IonText className={styles["value-text"]}>{formatSatoshi(draft.price_sats as Satoshi)} sats</IonText>
											)
									}

								</IonItem>

								<IonItem>
									<IonLabel color="primary">
										Payer data
										{

											Object.keys(draft.expected_data).length !== 0 && (
												<div className="ion-padding-horizontal ion-margin-top" style={{
													display: 'flex',
													flexWrap: 'wrap',

													alignItems: 'center',
												}}>
													<div style={{
														display: 'flex',
														flexWrap: 'wrap',
														gap: '8px',
													}}>
														{Object.keys(draft.expected_data).map(k => (
															<IonChip key={k} color="primary" className="key-chip">
																{k}
															</IonChip>
														))}
													</div>
												</div>
											)
										}

									</IonLabel>

									{
										Object.keys(draft.expected_data).length === 0 && (
											<IonText className="text-quiet">&lt;No payer data&gt;</IonText>
										)
									}



								</IonItem>

								<IonItem>
									<IonLabel color="primary">
										Callback URL

										{
											draft.callback_url && (
												<div>
													<CodeBox label="" value={expandAndHighlight(draft.callback_url, Object.keys(draft.expected_data))} />
												</div>
											)
										}
									</IonLabel>
									{
										!draft.callback_url && (
											<IonText className="text-quiet">
												&lt;No callback URL&gt;
											</IonText>
										)
									}


								</IonItem>

							</IonList>
						)
					}
				</IonContent>
			</DndProvider>
		</IonModal>
	)
}

export default OfferInfoModal;
