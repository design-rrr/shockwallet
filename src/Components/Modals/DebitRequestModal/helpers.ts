import { nip05 } from "nostr-tools"
import { fetchNostrUserMetadataEvent } from "../../../Api/nostrHandler"
import { IntervalType } from "@/Api/pub/autogenerated/ts/types"

export enum WalletIntervalEnum {
	DAY = "Days",
	WEEK = "Weeks",
	MONTH = "Months",
}

export const intervalTypeToUnit = (interval: IntervalType): WalletIntervalEnum => {
	switch (interval) {
		case IntervalType.DAY: return WalletIntervalEnum.DAY
		case IntervalType.WEEK: return WalletIntervalEnum.WEEK
		case IntervalType.MONTH: return WalletIntervalEnum.MONTH
		default: throw new Error("invalid interval")
	}
}

export const unitToIntervalType = (unit: WalletIntervalEnum) => {
	switch (unit) {
		case WalletIntervalEnum.DAY: return IntervalType.DAY
		case WalletIntervalEnum.WEEK: return IntervalType.WEEK
		case WalletIntervalEnum.MONTH: return IntervalType.MONTH
		default: throw new Error("invalid unit")
	}
}

export const unitToMilliSeconds = (interval: WalletIntervalEnum) => {
	switch (interval) {
		case WalletIntervalEnum.DAY: return 24 * 60 * 60 * 1000
		case WalletIntervalEnum.WEEK: return 7 * 24 * 60 * 60 * 1000
		case WalletIntervalEnum.MONTH: return 30 * 24 * 60 * 60 * 1000
		default: throw new Error("invalid interval")
	}
}

export const getDebitAppNameAndAvatarUrl = async (npub: string, relays: string[]): Promise<{ requestorDomain: string, avatarUrl: string }> => {
	const metadataEvent = await fetchNostrUserMetadataEvent(npub, relays);
	const result = {
		requestorDomain: "",
		avatarUrl: `https://robohash.org/${npub}.png?bgset=bg1`
	}
	if (!metadataEvent) return result

	try {

		const metadata = JSON.parse(metadataEvent.content)



		if (metadata.nip05 && typeof metadata.nip05 === "string" && nip05.NIP05_REGEX.test(metadata.nip05)) {
			const profilePointer = await nip05.queryProfile(metadata.nip05);
			if (!profilePointer) return result
			if (profilePointer.pubkey !== npub) return result;
			const [_, _name, domain] = metadata.nip05.match(nip05.NIP05_REGEX);
			result.requestorDomain = domain;
			result.avatarUrl = "https://www.google.com/s2/favicons?sz=64&domain=" + domain
		}

		if (metadata.picture && typeof metadata.picture === "string") {
			result.avatarUrl = metadata.picture;
		}

		return result


	} catch (err) {
		if (err instanceof Error) console.log("Error when fetching requestor pubkey metadata", err)
		return result
	}
}
