import { useEffect } from "react"
import { findReducerMerger, useDispatch, useSelector } from "../../State/store"
import { Subscription, SubscriptionPayment, addSubPayment, removeActiveSub } from "../../State/Slices/subscriptionsSlice"
import { InputClassification, openNotification, usdToBTCSpotLink } from "../../constants"
import { createLnurlInvoice, handlePayInvoice } from "../../Api/helpers"
import axios from "axios"
import { disconnectNostrClientCalls, getNostrClient, getNostrPrivateKey, parseNprofile } from "../../Api/nostr"
import { setLatestOperation } from "../../State/Slices/HistorySlice"
import { UserOperationType } from "../../Api/autogenerated/ts/types"
import { editPaySources } from "../../State/Slices/paySourcesSlice"
import { editSpendSources } from "../../State/Slices/spendSourcesSlice"
import { fetchRemoteBackup, saveRemoteBackup } from "../../helpers/remoteBackups"
const SubsCheckIntervalSeconds = 10 * 60
export const RemoteBackup = () => {
    const remoteBackupProfile = useSelector(({ prefs }) => prefs.remoteBackupNProfile)
    const dispatch = useDispatch();
    useEffect(() => {
        const keyExist = getNostrPrivateKey()
        if (!keyExist) {
            console.log("instance not initialized yet to sync backups")
            return
        }
        if (!remoteBackupProfile) {
            console.log("remote backups not configured")
            return
        }
        syncBackups(remoteBackupProfile).then(() => console.log("backups synced succesfully"))
    }, [])
    const syncBackups = async (nprofile: string) => {
        const backup = await fetchRemoteBackup(nprofile)
        let data: Record<string, string | null> = {}
        if (backup) {
            data = JSON.parse(backup);
            for (const key in data) {
                const merger = findReducerMerger(key)
                if (!merger) {
                    continue
                }
                const dataItem = data[key]
                const storageItem = localStorage.getItem(key)
                if (!storageItem || !dataItem) {
                    continue
                }
                data[key] = merger(dataItem, storageItem)
            }

        } else {
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i) ?? "null";
                const value = localStorage.getItem(key);
                data[key] = value;
            }
        }
        await saveRemoteBackup(nprofile, JSON.stringify(data))

    }
    return null
}