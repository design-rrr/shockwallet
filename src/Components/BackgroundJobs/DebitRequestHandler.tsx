import { useCallback, useEffect, useMemo, useState } from "react";
import { useHistory } from "react-router";
import * as Types from "../../Api/pub/autogenerated/ts/types";
import { SourceDebitRequest } from "../../globalTypes";
import { getNostrClient, parseNprofile } from "../../Api/nostr";
import { selectNostrSpends, useSelector } from "../../State/store";
import { Modal } from "../Modals/Modal";
import { decodeInvoice, parseBitcoinInput } from "../../constants";
import { types } from "util";

export const DebitRequestHandler = () => {
    const history = useHistory();
    const nostrSpends = useSelector(selectNostrSpends);
    const nodedUp = useSelector(state => state.nostrPrivateKey);
    const [requestData, setRequestData] = useState<SourceDebitRequest | null>(null);
    useEffect(() => {
        if (!nodedUp) {
            return;
        }
        console.log("inside")
        nostrSpends.forEach(source => {
            const { pubkey, relays } = parseNprofile(source.pasteField)
            getNostrClient({ pubkey, relays }, source.keys).then(c => {
                c.GetLiveDebitRequests(debitReq => {
                    if (debitReq.status === "OK") {
                        console.log("Got one")
                        setRequestData({ request: debitReq, source })
                    }
                })
            })
        });
    }, [nostrSpends, nodedUp])
    const authroizeRequest = useCallback(async (request: SourceDebitRequest) => {
        if (request.request.debit.type === Types.LiveDebitRequest_debit_type.INVOICE) {
            const invoice = request.request.debit.invoice
            const parsed = await parseBitcoinInput(invoice)
            history.push({
                pathname: "/send",
                state: parsed
            })
            return
        }
        const res = await (await getNostrClient(request.source.pasteField, request.source.keys)).AuthorizeDebit({
            authorize_npub: request.request.npub, rules: [
                {
                    rule: {
                        type: Types.DebitRule_rule_type.FREQUENCY_RULE,
                        frequency_rule: request.request.debit.frequency
                    }
                }
            ]
        });
        if (res.status !== "OK") {
            throw new Error(res.reason);
        }
        setRequestData(null)
    }, [])
    const banRequest = useCallback(async (request: SourceDebitRequest) => {
        const res = await (await getNostrClient(request.source.pasteField, request.source.keys)).BanDebit({ npub: request.request.npub });
        if (res.status !== "OK") {
            throw new Error(res.reason);
        }
        setRequestData(null)
    }, [])
    const modalContent = useMemo(() => {
        if (!requestData) { return <></> }
        let debitAmount = 0
        if (requestData.request.debit.type === Types.LiveDebitRequest_debit_type.INVOICE) {
            const { amount } = decodeInvoice(requestData.request.debit.invoice)
            debitAmount = amount
        } else {
            debitAmount = requestData.request.debit.frequency.amount
        }
        return <>
            <div className='Sources_modal_header'>Incoming Request</div>
            <div className='Sources_modal_discription'>{requestData.request.npub}</div>
            <div className='Sources_modal_discription'>
                {
                    requestData.request.debit.type === Types.LiveDebitRequest_debit_type.FREQUENCY
                        ?
                        `Wants you to pay ${debitAmount} sats per ${requestData.request.debit.frequency.interval}, ${requestData.request.debit.frequency.number_of_intervals} times`
                        :
                        `Wants you to pay ${debitAmount} sats`
                }
            </div>
            <div className='Sources_modal_discription'>Wants to spend</div>
            <div className='Sources_modal_discription'>{debitAmount}</div>
            <button onClick={() => banRequest(requestData)}>DENY AND BAN</button>
            <div className="Sources_modal_add_btn">
                <button onClick={() => setRequestData(null)}>Deny</button>
                <button onClick={() => authroizeRequest(requestData)}>{requestData.request.debit.type === Types.LiveDebitRequest_debit_type.FREQUENCY ? "Allow" : "Pay"}</button>
            </div>
        </>
    }, [requestData])
    if (!requestData) {
        return null
    }

    return <Modal isShown={!!requestData} hide={() => setRequestData(null)} modalContent={modalContent} headerText={''} />
}