name: Android Build

on:
  push:
    tags:
      - 'v*'
    branches:
      - test 

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  APP_NAME: "shockwallet"  
  VERSION: ${{ github.ref_name }}  

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: |
          npm ci
          npm install -g @ionic/cli native-run cordova-res

      - name: Set up environment
        run: cp .env.production.example .env

      - name: Run pre-build script
        run: npm run prebuild

      - name: Build Android app
        run: ionic cap build android --no-interactive

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./android/gradlew

      - name: Build with Gradle
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Ensure base64 is installed
        run: apt-get install -y coreutils

      - name: Install Android SDK
        run: |
          apt-get update
          apt-get install -y wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $HOME
          mkdir -p $HOME/cmdline-tools/cmdline-tools
          mv $HOME/cmdline-tools/* $HOME/cmdline-tools/cmdline-tools/
          export ANDROID_HOME=$HOME/cmdline-tools
          export PATH=$ANDROID_HOME/bin:$PATH
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3"
        env:
          ANDROID_HOME: ${{ runner.temp }}/android-sdk
          PATH: ${{ runner.temp }}/android-sdk/cmdline-tools/bin:${{ runner.temp }}/android-sdk/platform-tools:${{ runner.temp }}/android-sdk/build-tools/30.0.3:$PATH

      - name: Decode Keystore
        run: |
          echo ${{ secrets.ANDROID_KEYSTORE }} | base64 --decode > my-release-key.keystore
        shell: bash

      - name: Verify Keystore
        run: |
          keytool -list -v -keystore my-release-key.keystore -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        shell: bash

      - name: Sign APK
        run: |
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -keypass ${{ secrets.ANDROID_KEY_PASSWORD }} android/app/build/outputs/apk/release/app-release-unsigned.apk ${{ secrets.ANDROID_KEY_ALIAS }}
          zipalign -v 4 android/app/build/outputs/apk/release/app-release-unsigned.apk android/app/build/outputs/apk/release/${{ env.APP_NAME }}-${{ env.VERSION }}.apk
        shell: bash

      - name: Verify APK
        run: |
          apksigner verify android/app/build/outputs/apk/release/${{ env.APP_NAME }}-${{ env.VERSION }}.apk
        shell: bash

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/${{ env.APP_NAME }}-${{ env.VERSION }}.apk
