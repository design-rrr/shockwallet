apply plugin: 'com.android.application'

// Function to get environment variables with proper scoping
def getEnvVar(String key, String defaultValue) {
    // 1. Check system environment
    if (System.getenv(key) != null) {
        return System.getenv(key)
    }

    // 2. Check project properties (-P flags)
    if (project.hasProperty(key)) {
        return project.property(key)
    }

    // 3. Check .env file (located in Ionic project root)
    def envFile = rootProject.rootDir.parentFile?.toPath()?.resolve('.env')?.toFile()
    if (envFile?.exists()) {
        def envVars = [:]
        envFile.eachLine { line ->
            def parts = line.split('=', 2)
            if (parts.size() == 2) {
                def i = parts[0].trim()
                def value = parts[1].trim().replaceAll('^\"|\"$', '')
                envVars[i] = value
            }
        }
        if (envVars.containsKey(key)) {
            return envVars[key]
        }
    }

    // 4. Return default if nothing found
    return defaultValue
}

def getIntegerEnvVar(String key, int defaultValue) {
		def value = getEnvVar(key, null)
		return value ? value.toInteger() : defaultValue
}


android {
    namespace "app.shockwallet"
    compileSdk rootProject.ext.compileSdkVersion

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_17
      targetCompatibility JavaVersion.VERSION_17
		}

    defaultConfig {
				applicationId getEnvVar("VITE_ANDROID_APPLICATION_ID", "app.shockwallet.my")
				versionName getEnvVar("VERSION", "0.0.0-dev")
				versionCode getIntegerEnvVar("VERSION_CODE", 3)

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

				manifestPlaceholders = [
					appLabel : getEnvVar("VITE_APP_NAME", "Wallet"),
          hostName : getEnvVar("VITE_APP_URL", "wallet.exampl"),
        ]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

java {
	toolchain {
			languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
    implementation 'com.google.mlkit:barcode-scanning: 17.3.0' // The latest version number of the API
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
